# reference http://xenyinzen.wikidot.com/tools-usage:write-makefile

IDENT=-D_DEBUG -D_LIBC -DMIPS -DCONS_BAUD="B115200" -DRADEON7000 -DVGA_BASE="0xb0000000"
ENDIAN=EL

.SUFFIXES:    .S .c .cpp .o

CROSS_COMPILE     =mipsisa32-elf-

#
# Include the make variables (CC, etc...)
#

AS        = $(CROSS_COMPILE)as
LD        = $(CROSS_COMPILE)ld
CC        = $(CROSS_COMPILE)gcc
GPP        = $(CROSS_COMPILE)g++
CPP        = $(CC) -E
AR        = $(CROSS_COMPILE)ar
NM        = $(CROSS_COMPILE)nm
STRIP        = $(CROSS_COMPILE)strip
OBJCOPY        = $(CROSS_COMPILE)objcopy
OBJDUMP        = $(CROSS_COMPILE)objdump
RANLIB        = $(CROSS_COMPILE)ranlib
SIZE        = $(CROSS_COMPILE)size

# optimize
OPT?=    -O2

# source tree is located via $S relative to the compilation directory
ifndef S
S:=.
endif

# Defines

TARGET= ${S}/init/
MACHINE=mips
MACHINE_ARCH=mips
COMPILEDIR=./include/mips/include
OBJDIR=${COMPILEDIR}
PMONDIR=${S}
# -I:gcc want to find PATH
INCLUDES=    -I. -I${S}/include -I${S}/lib -I${S}\
        -I${TARGET} -I${COMPILEDIR} -nostdinc

CPPFLAGS=    ${INCLUDES} ${IDENT} -D_KERNEL -D_CNOS_\
        -${ENDIAN} -mno-abicalls -mips3 -mcpu=r4000 \
        -fno-rtti  -fomit-frame-pointer -nostdinc -nostdlib \
        -fno-exceptions -fcheck-new

CWARNFLAGS=    -Wall -Wstrict-prototypes \
        -Wno-uninitialized -Wno-format -Wno-main \
        -Wnon-virtual-dtor -Wno-parentheses \
        -Wno-pmf-conversions -Wno-pointer-arith  -Wno-unused-function \
        -Wundef

CFLAGS=        ${DEBUG} ${CWARNFLAGS} ${OPT} -G 0
AFLAGS=        -D_LOCORE -G 0
LFLAGS=        -${ENDIAN} -N -G 0 -T$(S)/ldscript/ld.script -e start
STRIPFLAGS=    -g -S --strip-debug

HOSTCC?=    ${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=    ${CFLAGS}

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.

USRLAND_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
USRLAND_C_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

NORMAL_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_C_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
NORMAL_GPP= ${GPP} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<

DRIVER_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=    ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

NORMAL_S=    ${CC} ${AFLAGS} ${CPPFLAGS} -c $<
NORMAL_S_C=    ${AS}  ${COPTS} ${PARAM} $< -o $@

####################################################################################
##
##
##
OBJS= init.o \
    Hal.o \
    Serial.o \
    Cnos.o \
    Mm.o \
    Fs.o \
    interrupt.o \
    mips.o \
    KrnlDebug.o \
    desktop.o \
    surface.o \
    taskbar.o \
    window.o \
    button.o \
    Test.o
####################################################################################
##      LIB
##

LIBS= string.o unicodefont16.a

####################################################################################
#
#      dirvers
#
DIRVERS = ATIR7000.o i8042.o pci.o ohci.o

####################################################################################
# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP}
#    ${SYSTEM_LD_HEAD}
#    ${SYSTEM_LD}
#    ${SYSTEM_LD_TAIL}

SYSTEM_OBJ=    start.o  ${OBJS} ${LIBS} ${DIRVERS}

SYSTEM_DEP=    Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=    rm -f $@
SYSTEM_LD=    @echo ${LD} ${LFLAGS} -o $@ '$${SYSTEM_OBJ}'; \
        ${LD} ${LFLAGS} -o $@ ${SYSTEM_OBJ}
SYSTEM_LD_TAIL=    @${SIZE} $@; chmod 755 $@ ; \
        ${OBJCOPY} -O binary $@ $@.bin

DEBUG?=
ifeq (${DEBUG}, "-g")
LFLAGS+=    -X
SYSTEM_LD_TAIL+=; \
        echo cp $@ $@.gdb; rm -f $@.gdb; cp $@ $@.gdb; \
        echo ${STRIP} ${STRIPFLAGS} $@; ${STRIP} ${STRIPFLAGS} $@
else
LFLAGS+=    -S
endif

#####################################################################################
all: cnos Makefile

cnos: ${SYSTEM_DEP}
    ${SYSTEM_LD_HEAD}
    ${SYSTEM_LD}
    ${SYSTEM_LD_TAIL}

clean::
	rm -f tags *.[io] [a-z]*.s \
        cnos cnos.bin cnos.txt cnos_elf.txt
dump:
	$(OBJDUMP) -DS cnos >cnos.txt

tags:
	echo "see $S/kern/Makefile for tags"

####################################################################################
#   %.S
####################################################################################
start.o: $S/init/start.S Makefile
    ${NORMAL_S}
mips.o:    $S/kern/ke/mips.S
    ${NORMAL_S}

####################################################################################
#   %.CPP
####################################################################################
init.o: $S/init/init.cpp
    ${NORMAL_GPP}

Hal.o:     $S/hal/Hal.cpp
    ${NORMAL_GPP}

Serial.o:    $S/hal/Serial.cpp
    ${NORMAL_GPP}

Cnos.o:        $S/kern/ke/Cnos.cpp
    ${NORMAL_GPP}

Mm.o:        $S/mm/Mm.cpp
    ${NORMAL_GPP}

Fs.o:        $S/fs/Fs.cpp
    ${NORMAL_GPP}

interrupt.o:    $S/kern/ke/interrupt.cpp
    ${NORMAL_GPP}

Test.o:        $S/test/Test.cpp
    ${NORMAL_GPP}

KrnlDebug.o: $S/kern/kd/KrnlDebug.cpp
    ${NORMAL_GPP}

desktop.o: $S/subsystems/gdi/desktop.cpp
    ${NORMAL_GPP}

surface.o: $S/subsystems/gdi/surface.cpp
    ${NORMAL_GPP}

taskbar.o: $S/subsystems/gdi/taskbar.cpp
    ${NORMAL_GPP}

window.o: $S/subsystems/gdi/window.cpp
    ${NORMAL_GPP}

button.o: $S/subsystems/gdi/button.cpp
    ${NORMAL_GPP}

####################################################################################
#
#  lib file
#
####################################################################################
string.o:        $S/lib/string.cpp
    ${NORMAL_GPP}

unicodefont16.a:    $S/media/font/unicodefont16.cpp
        ${GPP} ${CFLAGS} ${CPPFLAGS} ${PROF} -o unicodefont16.a -c $<

####################################################################################
#
#  driver file
#
####################################################################################
ATIR7000.o:        $S/dev/video/atir7000/ATIR7000.cpp
    ${NORMAL_GPP}
i8042.o:        $(S)/dev/input/i8042/i8042.cpp
    ${NORMAL_GPP}
pci.o:            $(S)/dev/bus/pci/pci.cpp
    ${NORMAL_GPP}
ohci.o:            $(S)/dev/bus/usb/ohci.cpp
    ${NORMAL_GPP}
